name: Product Availability Monitor

on:
  schedule:
    # Run every 1 hr
    - cron: '*/30 * * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 lxml playwright

    -name: Run test
      run: python test_script.py

    - name: 4. Install Playwright Browsers
      run: playwright install --with-deps chromium
    
    - name: Load previous status
      uses: actions/cache@v3
      with:
        path: status.json
        key: product-status-${{ runner.os }}
    
    - name: Debug email variables
      env:
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
      run: |
        python -c "
        import os, re
        
        email_addr = os.environ.get('EMAIL_ADDRESS', '')
        to_email = os.environ.get('TO_EMAIL', '')
        password = os.environ.get('EMAIL_PASSWORD', '')
        
        print('EMAIL_ADDRESS length:', len(email_addr))
        print('TO_EMAIL length:', len(to_email))
        print('PASSWORD length:', len(password))
        
        print('EMAIL_ADDRESS has @:', '@' in email_addr)
        print('TO_EMAIL has @:', '@' in to_email)
        
        # Check for invisible characters
        print('EMAIL_ADDRESS repr:', repr(email_addr[:20]))
        print('TO_EMAIL repr:', repr(to_email[:20]))
        
        # Validate format
        email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        print('FROM email valid:', bool(re.match(email_regex, email_addr.strip())))
        print('TO email valid:', bool(re.match(email_regex, to_email.strip())))
        "

    - name: Run product monitor
      env:
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
      run: |
        python monitor.py
    
    - name: Save status
      uses: actions/cache@v3
      with:
        path: status.json
        key: product-status-${{ runner.os }}-${{ github.run_id }}
    
    # Optional: Upload logs as artifacts
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: monitor-logs
        path: |
          *.log
          status.json
